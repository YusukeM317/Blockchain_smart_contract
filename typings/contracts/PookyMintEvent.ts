/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export type MintTemplateStruct = {
  canMint: PromiseOrValue<boolean>;
  rarity: PromiseOrValue<BigNumberish>;
  maxMints: PromiseOrValue<BigNumberish>;
  currentMints: PromiseOrValue<BigNumberish>;
  price: PromiseOrValue<BigNumberish>;
  payingToken: PromiseOrValue<string>;
};

export type MintTemplateStructOutput = [
  boolean,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  canMint: boolean;
  rarity: number;
  maxMints: BigNumber;
  currentMints: BigNumber;
  price: BigNumber;
  payingToken: string;
};

export interface PookyMintEventInterface extends utils.Interface {
  functions: {
    "BE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MOD()": FunctionFragment;
    "__PookyBallMinter_init(uint256,address,address,uint32,uint16,bytes32,uint64)": FunctionFragment;
    "ballsMinted()": FunctionFragment;
    "changeMintTemplateCanMint(uint256,bool)": FunctionFragment;
    "createMintTemplate((bool,uint8,uint256,uint256,uint256,address))": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(uint256,address,address,uint256,uint256,uint256,address,uint32,uint16,bytes32,uint64)": FunctionFragment;
    "lastMintTemplateId()": FunctionFragment;
    "maxBallsPerUser()": FunctionFragment;
    "maxMintSupply()": FunctionFragment;
    "minTierToBuy()": FunctionFragment;
    "mintBalls(uint256,uint256)": FunctionFragment;
    "mintBallsAuthorized(address,uint256,uint256)": FunctionFragment;
    "mintRandomRequests(uint256)": FunctionFragment;
    "mintTemplates(uint256)": FunctionFragment;
    "mintsLeft(address)": FunctionFragment;
    "pookyBall()": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeBallAuthorized(uint256)": FunctionFragment;
    "revokePeriod()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAddressTier(address,uint256)": FunctionFragment;
    "setMaxBallsPerUser(uint256)": FunctionFragment;
    "setMinTierToBuy(uint256)": FunctionFragment;
    "setPookyBallContract(address)": FunctionFragment;
    "setRevokePeriod(uint256)": FunctionFragment;
    "setVrfParameters(address,uint64,uint32,uint16,bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "treasuryWallet()": FunctionFragment;
    "userTiers(address)": FunctionFragment;
    "vrf_callbackGasLimit()": FunctionFragment;
    "vrf_coordinator()": FunctionFragment;
    "vrf_keyHash()": FunctionFragment;
    "vrf_requestConfirmations()": FunctionFragment;
    "vrf_subscriptionId()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BE"
      | "DEFAULT_ADMIN_ROLE"
      | "MOD"
      | "__PookyBallMinter_init"
      | "ballsMinted"
      | "changeMintTemplateCanMint"
      | "createMintTemplate"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "lastMintTemplateId"
      | "maxBallsPerUser"
      | "maxMintSupply"
      | "minTierToBuy"
      | "mintBalls"
      | "mintBallsAuthorized"
      | "mintRandomRequests"
      | "mintTemplates"
      | "mintsLeft"
      | "pookyBall"
      | "rawFulfillRandomWords"
      | "renounceRole"
      | "revokeBallAuthorized"
      | "revokePeriod"
      | "revokeRole"
      | "setAddressTier"
      | "setMaxBallsPerUser"
      | "setMinTierToBuy"
      | "setPookyBallContract"
      | "setRevokePeriod"
      | "setVrfParameters"
      | "supportsInterface"
      | "treasuryWallet"
      | "userTiers"
      | "vrf_callbackGasLimit"
      | "vrf_coordinator"
      | "vrf_keyHash"
      | "vrf_requestConfirmations"
      | "vrf_subscriptionId"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MOD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "__PookyBallMinter_init",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ballsMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeMintTemplateCanMint",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "createMintTemplate",
    values: [MintTemplateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastMintTemplateId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxBallsPerUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMintSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTierToBuy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintBalls",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBallsAuthorized",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintRandomRequests",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTemplates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintsLeft",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "pookyBall", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeBallAuthorized",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddressTier",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBallsPerUser",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinTierToBuy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPookyBallContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevokePeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVrfParameters",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userTiers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vrf_callbackGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrf_coordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrf_keyHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrf_requestConfirmations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrf_subscriptionId",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MOD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__PookyBallMinter_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ballsMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMintTemplateCanMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMintTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastMintTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBallsPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMintSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTierToBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintBalls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintBallsAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintRandomRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintTemplates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintsLeft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pookyBall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeBallAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddressTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBallsPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinTierToBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPookyBallContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevokePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVrfParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userTiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vrf_callbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrf_coordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrf_keyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrf_requestConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrf_subscriptionId",
    data: BytesLike
  ): Result;

  events: {
    "CreateMintTemplate(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RandomnessFullfiled(uint256,uint256,uint256)": EventFragment;
    "RandomnessRequested(uint256,address,uint256)": EventFragment;
    "RequestMintFromTemplate(uint256,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetMintTemplateCanMint(uint256,bool)": EventFragment;
    "UserTierSet(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateMintTemplate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RandomnessFullfiled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RandomnessRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestMintFromTemplate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMintTemplateCanMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserTierSet"): EventFragment;
}

export interface CreateMintTemplateEventObject {
  templateId: BigNumber;
}
export type CreateMintTemplateEvent = TypedEvent<
  [BigNumber],
  CreateMintTemplateEventObject
>;

export type CreateMintTemplateEventFilter =
  TypedEventFilter<CreateMintTemplateEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RandomnessFullfiledEventObject {
  requestId: BigNumber;
  ballId: BigNumber;
  randomEntropy: BigNumber;
}
export type RandomnessFullfiledEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  RandomnessFullfiledEventObject
>;

export type RandomnessFullfiledEventFilter =
  TypedEventFilter<RandomnessFullfiledEvent>;

export interface RandomnessRequestedEventObject {
  requestId: BigNumber;
  user: string;
  ballId: BigNumber;
}
export type RandomnessRequestedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RandomnessRequestedEventObject
>;

export type RandomnessRequestedEventFilter =
  TypedEventFilter<RandomnessRequestedEvent>;

export interface RequestMintFromTemplateEventObject {
  templateId: BigNumber;
  user: string;
}
export type RequestMintFromTemplateEvent = TypedEvent<
  [BigNumber, string],
  RequestMintFromTemplateEventObject
>;

export type RequestMintFromTemplateEventFilter =
  TypedEventFilter<RequestMintFromTemplateEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetMintTemplateCanMintEventObject {
  templateId: BigNumber;
  canMint: boolean;
}
export type SetMintTemplateCanMintEvent = TypedEvent<
  [BigNumber, boolean],
  SetMintTemplateCanMintEventObject
>;

export type SetMintTemplateCanMintEventFilter =
  TypedEventFilter<SetMintTemplateCanMintEvent>;

export interface UserTierSetEventObject {
  user: string;
  tier: BigNumber;
}
export type UserTierSetEvent = TypedEvent<
  [string, BigNumber],
  UserTierSetEventObject
>;

export type UserTierSetEventFilter = TypedEventFilter<UserTierSetEvent>;

export interface PookyMintEvent extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PookyMintEventInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MOD(overrides?: CallOverrides): Promise<[string]>;

    __PookyBallMinter_init(
      _startFromId: PromiseOrValue<BigNumberish>,
      _admin: PromiseOrValue<string>,
      _vrfCoordinator: PromiseOrValue<string>,
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestConfirmations: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ballsMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeMintTemplateCanMint(
      mintTemplateId: PromiseOrValue<BigNumberish>,
      _canMint: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createMintTemplate(
      newMintTemplate: MintTemplateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _startFromId: PromiseOrValue<BigNumberish>,
      _admin: PromiseOrValue<string>,
      _treasuryWallet: PromiseOrValue<string>,
      _maxMintSupply: PromiseOrValue<BigNumberish>,
      _maxBallsPerUser: PromiseOrValue<BigNumberish>,
      _revokePeriod: PromiseOrValue<BigNumberish>,
      _vrfCoordinator: PromiseOrValue<string>,
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestConfirmations: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lastMintTemplateId(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxBallsPerUser(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxMintSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    minTierToBuy(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintBalls(
      numberOfBalls: PromiseOrValue<BigNumberish>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintBallsAuthorized(
      user: PromiseOrValue<string>,
      numberOfBalls: PromiseOrValue<BigNumberish>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintRandomRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { user: string; ballId: BigNumber }>;

    mintTemplates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, string] & {
        canMint: boolean;
        rarity: number;
        maxMints: BigNumber;
        currentMints: BigNumber;
        price: BigNumber;
        payingToken: string;
      }
    >;

    mintsLeft(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pookyBall(overrides?: CallOverrides): Promise<[string]>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeBallAuthorized(
      ballId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddressTier(
      _address: PromiseOrValue<string>,
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxBallsPerUser(
      _maxBallsPerUser: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinTierToBuy(
      _minTierToBuy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPookyBallContract(
      pookyBallAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRevokePeriod(
      _revokePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVrfParameters(
      _coordinator: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      requestConfirmation: PromiseOrValue<BigNumberish>,
      keyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    treasuryWallet(overrides?: CallOverrides): Promise<[string]>;

    userTiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vrf_callbackGasLimit(overrides?: CallOverrides): Promise<[number]>;

    vrf_coordinator(overrides?: CallOverrides): Promise<[string]>;

    vrf_keyHash(overrides?: CallOverrides): Promise<[string]>;

    vrf_requestConfirmations(overrides?: CallOverrides): Promise<[number]>;

    vrf_subscriptionId(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MOD(overrides?: CallOverrides): Promise<string>;

  __PookyBallMinter_init(
    _startFromId: PromiseOrValue<BigNumberish>,
    _admin: PromiseOrValue<string>,
    _vrfCoordinator: PromiseOrValue<string>,
    _callbackGasLimit: PromiseOrValue<BigNumberish>,
    _requestConfirmations: PromiseOrValue<BigNumberish>,
    _keyHash: PromiseOrValue<BytesLike>,
    _subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ballsMinted(overrides?: CallOverrides): Promise<BigNumber>;

  changeMintTemplateCanMint(
    mintTemplateId: PromiseOrValue<BigNumberish>,
    _canMint: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createMintTemplate(
    newMintTemplate: MintTemplateStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _startFromId: PromiseOrValue<BigNumberish>,
    _admin: PromiseOrValue<string>,
    _treasuryWallet: PromiseOrValue<string>,
    _maxMintSupply: PromiseOrValue<BigNumberish>,
    _maxBallsPerUser: PromiseOrValue<BigNumberish>,
    _revokePeriod: PromiseOrValue<BigNumberish>,
    _vrfCoordinator: PromiseOrValue<string>,
    _callbackGasLimit: PromiseOrValue<BigNumberish>,
    _requestConfirmations: PromiseOrValue<BigNumberish>,
    _keyHash: PromiseOrValue<BytesLike>,
    _subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lastMintTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

  maxBallsPerUser(overrides?: CallOverrides): Promise<BigNumber>;

  maxMintSupply(overrides?: CallOverrides): Promise<BigNumber>;

  minTierToBuy(overrides?: CallOverrides): Promise<BigNumber>;

  mintBalls(
    numberOfBalls: PromiseOrValue<BigNumberish>,
    templateId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintBallsAuthorized(
    user: PromiseOrValue<string>,
    numberOfBalls: PromiseOrValue<BigNumberish>,
    templateId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintRandomRequests(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { user: string; ballId: BigNumber }>;

  mintTemplates(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber, BigNumber, BigNumber, string] & {
      canMint: boolean;
      rarity: number;
      maxMints: BigNumber;
      currentMints: BigNumber;
      price: BigNumber;
      payingToken: string;
    }
  >;

  mintsLeft(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pookyBall(overrides?: CallOverrides): Promise<string>;

  rawFulfillRandomWords(
    requestId: PromiseOrValue<BigNumberish>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeBallAuthorized(
    ballId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddressTier(
    _address: PromiseOrValue<string>,
    _tier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxBallsPerUser(
    _maxBallsPerUser: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinTierToBuy(
    _minTierToBuy: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPookyBallContract(
    pookyBallAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRevokePeriod(
    _revokePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVrfParameters(
    _coordinator: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    requestConfirmation: PromiseOrValue<BigNumberish>,
    keyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  treasuryWallet(overrides?: CallOverrides): Promise<string>;

  userTiers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vrf_callbackGasLimit(overrides?: CallOverrides): Promise<number>;

  vrf_coordinator(overrides?: CallOverrides): Promise<string>;

  vrf_keyHash(overrides?: CallOverrides): Promise<string>;

  vrf_requestConfirmations(overrides?: CallOverrides): Promise<number>;

  vrf_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MOD(overrides?: CallOverrides): Promise<string>;

    __PookyBallMinter_init(
      _startFromId: PromiseOrValue<BigNumberish>,
      _admin: PromiseOrValue<string>,
      _vrfCoordinator: PromiseOrValue<string>,
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestConfirmations: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ballsMinted(overrides?: CallOverrides): Promise<BigNumber>;

    changeMintTemplateCanMint(
      mintTemplateId: PromiseOrValue<BigNumberish>,
      _canMint: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    createMintTemplate(
      newMintTemplate: MintTemplateStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _startFromId: PromiseOrValue<BigNumberish>,
      _admin: PromiseOrValue<string>,
      _treasuryWallet: PromiseOrValue<string>,
      _maxMintSupply: PromiseOrValue<BigNumberish>,
      _maxBallsPerUser: PromiseOrValue<BigNumberish>,
      _revokePeriod: PromiseOrValue<BigNumberish>,
      _vrfCoordinator: PromiseOrValue<string>,
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestConfirmations: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lastMintTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

    maxBallsPerUser(overrides?: CallOverrides): Promise<BigNumber>;

    maxMintSupply(overrides?: CallOverrides): Promise<BigNumber>;

    minTierToBuy(overrides?: CallOverrides): Promise<BigNumber>;

    mintBalls(
      numberOfBalls: PromiseOrValue<BigNumberish>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBallsAuthorized(
      user: PromiseOrValue<string>,
      numberOfBalls: PromiseOrValue<BigNumberish>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintRandomRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { user: string; ballId: BigNumber }>;

    mintTemplates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, string] & {
        canMint: boolean;
        rarity: number;
        maxMints: BigNumber;
        currentMints: BigNumber;
        price: BigNumber;
        payingToken: string;
      }
    >;

    mintsLeft(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pookyBall(overrides?: CallOverrides): Promise<string>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeBallAuthorized(
      ballId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddressTier(
      _address: PromiseOrValue<string>,
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxBallsPerUser(
      _maxBallsPerUser: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinTierToBuy(
      _minTierToBuy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPookyBallContract(
      pookyBallAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevokePeriod(
      _revokePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVrfParameters(
      _coordinator: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      requestConfirmation: PromiseOrValue<BigNumberish>,
      keyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    treasuryWallet(overrides?: CallOverrides): Promise<string>;

    userTiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vrf_callbackGasLimit(overrides?: CallOverrides): Promise<number>;

    vrf_coordinator(overrides?: CallOverrides): Promise<string>;

    vrf_keyHash(overrides?: CallOverrides): Promise<string>;

    vrf_requestConfirmations(overrides?: CallOverrides): Promise<number>;

    vrf_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "CreateMintTemplate(uint256)"(
      templateId?: PromiseOrValue<BigNumberish> | null
    ): CreateMintTemplateEventFilter;
    CreateMintTemplate(
      templateId?: PromiseOrValue<BigNumberish> | null
    ): CreateMintTemplateEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RandomnessFullfiled(uint256,uint256,uint256)"(
      requestId?: PromiseOrValue<BigNumberish> | null,
      ballId?: PromiseOrValue<BigNumberish> | null,
      randomEntropy?: null
    ): RandomnessFullfiledEventFilter;
    RandomnessFullfiled(
      requestId?: PromiseOrValue<BigNumberish> | null,
      ballId?: PromiseOrValue<BigNumberish> | null,
      randomEntropy?: null
    ): RandomnessFullfiledEventFilter;

    "RandomnessRequested(uint256,address,uint256)"(
      requestId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      ballId?: PromiseOrValue<BigNumberish> | null
    ): RandomnessRequestedEventFilter;
    RandomnessRequested(
      requestId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      ballId?: PromiseOrValue<BigNumberish> | null
    ): RandomnessRequestedEventFilter;

    "RequestMintFromTemplate(uint256,address)"(
      templateId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null
    ): RequestMintFromTemplateEventFilter;
    RequestMintFromTemplate(
      templateId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null
    ): RequestMintFromTemplateEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SetMintTemplateCanMint(uint256,bool)"(
      templateId?: PromiseOrValue<BigNumberish> | null,
      canMint?: null
    ): SetMintTemplateCanMintEventFilter;
    SetMintTemplateCanMint(
      templateId?: PromiseOrValue<BigNumberish> | null,
      canMint?: null
    ): SetMintTemplateCanMintEventFilter;

    "UserTierSet(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      tier?: null
    ): UserTierSetEventFilter;
    UserTierSet(
      user?: PromiseOrValue<string> | null,
      tier?: null
    ): UserTierSetEventFilter;
  };

  estimateGas: {
    BE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MOD(overrides?: CallOverrides): Promise<BigNumber>;

    __PookyBallMinter_init(
      _startFromId: PromiseOrValue<BigNumberish>,
      _admin: PromiseOrValue<string>,
      _vrfCoordinator: PromiseOrValue<string>,
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestConfirmations: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ballsMinted(overrides?: CallOverrides): Promise<BigNumber>;

    changeMintTemplateCanMint(
      mintTemplateId: PromiseOrValue<BigNumberish>,
      _canMint: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createMintTemplate(
      newMintTemplate: MintTemplateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _startFromId: PromiseOrValue<BigNumberish>,
      _admin: PromiseOrValue<string>,
      _treasuryWallet: PromiseOrValue<string>,
      _maxMintSupply: PromiseOrValue<BigNumberish>,
      _maxBallsPerUser: PromiseOrValue<BigNumberish>,
      _revokePeriod: PromiseOrValue<BigNumberish>,
      _vrfCoordinator: PromiseOrValue<string>,
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestConfirmations: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lastMintTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

    maxBallsPerUser(overrides?: CallOverrides): Promise<BigNumber>;

    maxMintSupply(overrides?: CallOverrides): Promise<BigNumber>;

    minTierToBuy(overrides?: CallOverrides): Promise<BigNumber>;

    mintBalls(
      numberOfBalls: PromiseOrValue<BigNumberish>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintBallsAuthorized(
      user: PromiseOrValue<string>,
      numberOfBalls: PromiseOrValue<BigNumberish>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintRandomRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintTemplates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintsLeft(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pookyBall(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeBallAuthorized(
      ballId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddressTier(
      _address: PromiseOrValue<string>,
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxBallsPerUser(
      _maxBallsPerUser: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinTierToBuy(
      _minTierToBuy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPookyBallContract(
      pookyBallAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRevokePeriod(
      _revokePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVrfParameters(
      _coordinator: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      requestConfirmation: PromiseOrValue<BigNumberish>,
      keyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    treasuryWallet(overrides?: CallOverrides): Promise<BigNumber>;

    userTiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vrf_callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    vrf_coordinator(overrides?: CallOverrides): Promise<BigNumber>;

    vrf_keyHash(overrides?: CallOverrides): Promise<BigNumber>;

    vrf_requestConfirmations(overrides?: CallOverrides): Promise<BigNumber>;

    vrf_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __PookyBallMinter_init(
      _startFromId: PromiseOrValue<BigNumberish>,
      _admin: PromiseOrValue<string>,
      _vrfCoordinator: PromiseOrValue<string>,
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestConfirmations: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ballsMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeMintTemplateCanMint(
      mintTemplateId: PromiseOrValue<BigNumberish>,
      _canMint: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createMintTemplate(
      newMintTemplate: MintTemplateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _startFromId: PromiseOrValue<BigNumberish>,
      _admin: PromiseOrValue<string>,
      _treasuryWallet: PromiseOrValue<string>,
      _maxMintSupply: PromiseOrValue<BigNumberish>,
      _maxBallsPerUser: PromiseOrValue<BigNumberish>,
      _revokePeriod: PromiseOrValue<BigNumberish>,
      _vrfCoordinator: PromiseOrValue<string>,
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestConfirmations: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastMintTemplateId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxBallsPerUser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMintSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTierToBuy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintBalls(
      numberOfBalls: PromiseOrValue<BigNumberish>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintBallsAuthorized(
      user: PromiseOrValue<string>,
      numberOfBalls: PromiseOrValue<BigNumberish>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintRandomRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintTemplates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintsLeft(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pookyBall(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeBallAuthorized(
      ballId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddressTier(
      _address: PromiseOrValue<string>,
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxBallsPerUser(
      _maxBallsPerUser: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinTierToBuy(
      _minTierToBuy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPookyBallContract(
      pookyBallAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRevokePeriod(
      _revokePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVrfParameters(
      _coordinator: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      requestConfirmation: PromiseOrValue<BigNumberish>,
      keyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasuryWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userTiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vrf_callbackGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vrf_coordinator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrf_keyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrf_requestConfirmations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vrf_subscriptionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
