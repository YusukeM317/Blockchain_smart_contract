/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  WaitList,
  WaitListInterface,
} from "../../../contracts/mint/WaitList";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialTier",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "ArgumentSizeMismatch",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tier",
        type: "uint256",
      },
    ],
    name: "TierSet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isEligible",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requiredTier",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "tiers_",
        type: "uint256[]",
      },
    ],
    name: "setBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newRequiredTier",
        type: "uint256",
      },
    ],
    name: "setRequiredTier",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "tiers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106f33803806106f383398101604081905261002f91610090565b61003833610040565b6002556100a9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100a257600080fd5b5051919050565b61063b806100b86000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639946537a1161005b5780639946537a1461010e578063c8111f2714610121578063d32b95e614610141578063f2fde38b1461015457600080fd5b806366e305fd1461008d578063715018a6146100d25780637c6fb967146100dc5780638da5cb5b146100f3575b600080fd5b6100bd61009b3660046103f7565b6002546001600160a01b03909116600090815260016020526040902054101590565b60405190151581526020015b60405180910390f35b6100da610167565b005b6100e560025481565b6040519081526020016100c9565b6000546040516001600160a01b0390911681526020016100c9565b6100da61011c366004610419565b61017b565b6100e561012f3660046103f7565b60016020526000908152604090205481565b6100da61014f366004610508565b610188565b6100da6101623660046103f7565b6102b8565b61016f610331565b610179600061038b565b565b610183610331565b600255565b610190610331565b80518251146101c4578151815160405163990d9df760e01b8152600481019290925260248201526044015b60405180910390fd5b60005b82518110156102b3578181815181106101e2576101e26105c8565b602002602001015160016000858481518110610200576102006105c8565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555082818151811061023e5761023e6105c8565b60200260200101516001600160a01b03167f58ffae0baf944226215848ca67070a6dfb7d3693f5abd4a1a76285ea4230f152838381518110610282576102826105c8565b602002602001015160405161029991815260200190565b60405180910390a2806102ab816105de565b9150506101c7565b505050565b6102c0610331565b6001600160a01b0381166103255760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101bb565b61032e8161038b565b50565b6000546001600160a01b031633146101795760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101bb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146103f257600080fd5b919050565b60006020828403121561040957600080fd5b610412826103db565b9392505050565b60006020828403121561042b57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561047157610471610432565b604052919050565b600067ffffffffffffffff82111561049357610493610432565b5060051b60200190565b600082601f8301126104ae57600080fd5b813560206104c36104be83610479565b610448565b82815260059290921b840181019181810190868411156104e257600080fd5b8286015b848110156104fd57803583529183019183016104e6565b509695505050505050565b6000806040838503121561051b57600080fd5b823567ffffffffffffffff8082111561053357600080fd5b818501915085601f83011261054757600080fd5b813560206105576104be83610479565b82815260059290921b8401810191818101908984111561057657600080fd5b948201945b8386101561059b5761058c866103db565b8252948201949082019061057b565b965050860135925050808211156105b157600080fd5b506105be8582860161049d565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016105fe57634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212208c8b58b40230cb82b7626bc9c3329ea1ca72a48275e662a459472f494d5fe7d264736f6c63430008110033";

type WaitListConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WaitListConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WaitList__factory extends ContractFactory {
  constructor(...args: WaitListConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    initialTier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WaitList> {
    return super.deploy(initialTier, overrides || {}) as Promise<WaitList>;
  }
  override getDeployTransaction(
    initialTier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(initialTier, overrides || {});
  }
  override attach(address: string): WaitList {
    return super.attach(address) as WaitList;
  }
  override connect(signer: Signer): WaitList__factory {
    return super.connect(signer) as WaitList__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WaitListInterface {
    return new utils.Interface(_abi) as WaitListInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WaitList {
    return new Contract(address, _abi, signerOrProvider) as WaitList;
  }
}
