/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  WaitList,
  WaitListInterface,
} from "../../../contracts/mint/WaitList";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialTier",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "ArgumentSizeMismatch",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tier",
        type: "uint256",
      },
    ],
    name: "TierSet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isEligible",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requiredTier",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "tiers_",
        type: "uint256[]",
      },
    ],
    name: "setBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newRequiredTier",
        type: "uint256",
      },
    ],
    name: "setRequiredTier",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "tiers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000f3438038062000f348339818101604052810190620000379190620001ac565b620000576200004b6200009d60201b60201c565b620000a560201b60201c565b620000736701d94ad32bc1c73a60c01b6200016960201b60201c565b6200008f67fd293f99688c430160c01b6200016960201b60201c565b8060028190555050620001de565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b600080fd5b6000819050919050565b620001868162000171565b81146200019257600080fd5b50565b600081519050620001a6816200017b565b92915050565b600060208284031215620001c557620001c46200016c565b5b6000620001d58482850162000195565b91505092915050565b610d4680620001ee6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639946537a1161005b5780639946537a14610103578063c8111f271461011f578063d32b95e61461014f578063f2fde38b1461016b57610088565b806366e305fd1461008d578063715018a6146100bd5780637c6fb967146100c75780638da5cb5b146100e5575b600080fd5b6100a760048036038101906100a29190610784565b610187565b6040516100b491906107cc565b60405180910390f35b6100c5610211565b005b6100cf610225565b6040516100dc9190610800565b60405180910390f35b6100ed61022b565b6040516100fa919061082a565b60405180910390f35b61011d60048036038101906101189190610871565b610254565b005b61013960048036038101906101349190610784565b6102b6565b6040516101469190610800565b60405180910390f35b61016960048036038101906101649190610aba565b6102ce565b005b61018560048036038101906101809190610784565b610542565b005b600061019d67f3663575937477d560c01b6105c5565b6101b167ffecd1364b8c7f5b60c01b6105c5565b6101c567a4558676fdd6434d60c01b6105c5565b600254600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410159050919050565b6102196105c8565b6102236000610646565b565b60025481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61026867aefd4d0f4114335460c01b6105c5565b6102706105c8565b61028467b92dccdb730cfbe860c01b6105c5565b6102986769431e201a3a805260c01b6105c5565b6102ac67a3fe7b4ce30c56de60c01b6105c5565b8060028190555050565b60016020528060005260406000206000915090505481565b6102e2675aa59a9cf831ad4760c01b6105c5565b6102ea6105c8565b6102fe67f57df08174f5101660c01b6105c5565b610312677bb9adfaa4bc9a2560c01b6105c5565b61032667d92c9b786007e5bf60c01b6105c5565b61033a67810cfef38943dd4e60c01b6105c5565b80518251146103ac5761035767233796f05efa180d60c01b6105c5565b61036b67499edc2da071934360c01b6105c5565b815181516040517f990d9df70000000000000000000000000000000000000000000000000000000081526004016103a3929190610b32565b60405180910390fd5b6103c067904187361dc5fa5660c01b6105c5565b6103d4676836326f19873cc560c01b6105c5565b6103e86760d1bccd2b2282a360c01b6105c5565b60005b825181101561053d5761040867963cee5592bef23a60c01b6105c5565b81818151811061041b5761041a610b5b565b5b60200260200101516001600085848151811061043a57610439610b5b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610494671e72cabe31516f3960c01b6105c5565b6104a867a9abde7779cb641960c01b6105c5565b8281815181106104bb576104ba610b5b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f58ffae0baf944226215848ca67070a6dfb7d3693f5abd4a1a76285ea4230f15283838151811061050d5761050c610b5b565b5b60200260200101516040516105229190610800565b60405180910390a2808061053590610bb9565b9150506103eb565b505050565b61054a6105c8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b090610c84565b60405180910390fd5b6105c281610646565b50565b50565b6105d061070a565b73ffffffffffffffffffffffffffffffffffffffff166105ee61022b565b73ffffffffffffffffffffffffffffffffffffffff1614610644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063b90610cf0565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061075182610726565b9050919050565b61076181610746565b811461076c57600080fd5b50565b60008135905061077e81610758565b92915050565b60006020828403121561079a5761079961071c565b5b60006107a88482850161076f565b91505092915050565b60008115159050919050565b6107c6816107b1565b82525050565b60006020820190506107e160008301846107bd565b92915050565b6000819050919050565b6107fa816107e7565b82525050565b600060208201905061081560008301846107f1565b92915050565b61082481610746565b82525050565b600060208201905061083f600083018461081b565b92915050565b61084e816107e7565b811461085957600080fd5b50565b60008135905061086b81610845565b92915050565b6000602082840312156108875761088661071c565b5b60006108958482850161085c565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108ec826108a3565b810181811067ffffffffffffffff8211171561090b5761090a6108b4565b5b80604052505050565b600061091e610712565b905061092a82826108e3565b919050565b600067ffffffffffffffff82111561094a576109496108b4565b5b602082029050602081019050919050565b600080fd5b600061097361096e8461092f565b610914565b905080838252602082019050602084028301858111156109965761099561095b565b5b835b818110156109bf57806109ab888261076f565b845260208401935050602081019050610998565b5050509392505050565b600082601f8301126109de576109dd61089e565b5b81356109ee848260208601610960565b91505092915050565b600067ffffffffffffffff821115610a1257610a116108b4565b5b602082029050602081019050919050565b6000610a36610a31846109f7565b610914565b90508083825260208201905060208402830185811115610a5957610a5861095b565b5b835b81811015610a825780610a6e888261085c565b845260208401935050602081019050610a5b565b5050509392505050565b600082601f830112610aa157610aa061089e565b5b8135610ab1848260208601610a23565b91505092915050565b60008060408385031215610ad157610ad061071c565b5b600083013567ffffffffffffffff811115610aef57610aee610721565b5b610afb858286016109c9565b925050602083013567ffffffffffffffff811115610b1c57610b1b610721565b5b610b2885828601610a8c565b9150509250929050565b6000604082019050610b4760008301856107f1565b610b5460208301846107f1565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bc4826107e7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610bf657610bf5610b8a565b5b600182019050919050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c6e602683610c01565b9150610c7982610c12565b604082019050919050565b60006020820190508181036000830152610c9d81610c61565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610cda602083610c01565b9150610ce582610ca4565b602082019050919050565b60006020820190508181036000830152610d0981610ccd565b905091905056fea26469706673582212204739caec1030412ef399a006328b626600213b9b5f34c6833d59a436fd2d435664736f6c63430008110033";

type WaitListConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WaitListConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WaitList__factory extends ContractFactory {
  constructor(...args: WaitListConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    initialTier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WaitList> {
    return super.deploy(initialTier, overrides || {}) as Promise<WaitList>;
  }
  override getDeployTransaction(
    initialTier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(initialTier, overrides || {});
  }
  override attach(address: string): WaitList {
    return super.attach(address) as WaitList;
  }
  override connect(signer: Signer): WaitList__factory {
    return super.connect(signer) as WaitList__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WaitListInterface {
    return new utils.Interface(_abi) as WaitListInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WaitList {
    return new Contract(address, _abi, signerOrProvider) as WaitList;
  }
}
