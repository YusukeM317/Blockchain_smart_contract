/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type TemplateStruct = {
  rarity: PromiseOrValue<BigNumberish>;
  luxury: PromiseOrValue<BigNumberish>;
  supply: PromiseOrValue<BigNumberish>;
  minted: PromiseOrValue<BigNumberish>;
  price: PromiseOrValue<BigNumberish>;
};

export type TemplateStructOutput = [
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  rarity: number;
  luxury: BigNumber;
  supply: BigNumber;
  minted: BigNumber;
  price: BigNumber;
};

export interface GenesisMinterInterface extends utils.Interface {
  functions: {
    "ineligibilityReason(uint256,address,uint256)": FunctionFragment;
    "lastTemplateId()": FunctionFragment;
    "mint(uint256,address,uint256)": FunctionFragment;
    "pookyball()": FunctionFragment;
    "templates(uint256)": FunctionFragment;
    "waitlist()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ineligibilityReason"
      | "lastTemplateId"
      | "mint"
      | "pookyball"
      | "templates"
      | "waitlist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ineligibilityReason",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTemplateId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "pookyball", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "templates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "waitlist", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ineligibilityReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTemplateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pookyball", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "templates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "waitlist", data: BytesLike): Result;

  events: {
    "Sale(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Sale"): EventFragment;
}

export interface SaleEventObject {
  account: string;
  templateId: BigNumber;
  quantity: BigNumber;
  value: BigNumber;
}
export type SaleEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SaleEventObject
>;

export type SaleEventFilter = TypedEventFilter<SaleEvent>;

export interface GenesisMinter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GenesisMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ineligibilityReason(
      templateId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lastTemplateId(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      templateId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pookyball(overrides?: CallOverrides): Promise<[string]>;

    templates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rarity: number;
        luxury: BigNumber;
        supply: BigNumber;
        minted: BigNumber;
        price: BigNumber;
      }
    >;

    waitlist(overrides?: CallOverrides): Promise<[string]>;
  };

  ineligibilityReason(
    templateId: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  lastTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    templateId: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pookyball(overrides?: CallOverrides): Promise<string>;

  templates(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rarity: number;
      luxury: BigNumber;
      supply: BigNumber;
      minted: BigNumber;
      price: BigNumber;
    }
  >;

  waitlist(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ineligibilityReason(
      templateId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    lastTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      templateId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pookyball(overrides?: CallOverrides): Promise<string>;

    templates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rarity: number;
        luxury: BigNumber;
        supply: BigNumber;
        minted: BigNumber;
        price: BigNumber;
      }
    >;

    waitlist(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Sale(address,uint256,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      templateId?: PromiseOrValue<BigNumberish> | null,
      quantity?: null,
      value?: null
    ): SaleEventFilter;
    Sale(
      account?: PromiseOrValue<string> | null,
      templateId?: PromiseOrValue<BigNumberish> | null,
      quantity?: null,
      value?: null
    ): SaleEventFilter;
  };

  estimateGas: {
    ineligibilityReason(
      templateId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTemplateId(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      templateId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pookyball(overrides?: CallOverrides): Promise<BigNumber>;

    templates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    waitlist(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ineligibilityReason(
      templateId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTemplateId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      templateId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pookyball(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    templates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    waitlist(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
