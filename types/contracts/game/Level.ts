/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface LevelInterface extends utils.Interface {
  functions: {
    "PXP_BASE()": FunctionFragment;
    "PXP_DECIMALS()": FunctionFragment;
    "RATIO_DECIMALS()": FunctionFragment;
    "RATIO_POK()": FunctionFragment;
    "RATIO_PXP()": FunctionFragment;
    "levelPOK(uint256)": FunctionFragment;
    "levelPOKCost(uint256,uint256)": FunctionFragment;
    "levelPXP(uint256)": FunctionFragment;
    "levelUp(uint256,uint256)": FunctionFragment;
    "maxLevels(uint8)": FunctionFragment;
    "pok()": FunctionFragment;
    "pookyball()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PXP_BASE"
      | "PXP_DECIMALS"
      | "RATIO_DECIMALS"
      | "RATIO_POK"
      | "RATIO_PXP"
      | "levelPOK"
      | "levelPOKCost"
      | "levelPXP"
      | "levelUp"
      | "maxLevels"
      | "pok"
      | "pookyball"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "PXP_BASE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PXP_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RATIO_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "RATIO_POK", values?: undefined): string;
  encodeFunctionData(functionFragment: "RATIO_PXP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "levelPOK",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "levelPOKCost",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "levelPXP",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "levelUp",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxLevels",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "pok", values?: undefined): string;
  encodeFunctionData(functionFragment: "pookyball", values?: undefined): string;

  decodeFunctionResult(functionFragment: "PXP_BASE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PXP_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RATIO_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RATIO_POK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RATIO_PXP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "levelPOK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "levelPOKCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levelPXP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "levelUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxLevels", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pok", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pookyball", data: BytesLike): Result;

  events: {};
}

export interface Level extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LevelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PXP_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PXP_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    RATIO_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    RATIO_POK(overrides?: CallOverrides): Promise<[BigNumber]>;

    RATIO_PXP(overrides?: CallOverrides): Promise<[BigNumber]>;

    levelPOK(
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    levelPOKCost(
      tokenId: PromiseOrValue<BigNumberish>,
      levels: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    levelPXP(
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    levelUp(
      tokenId: PromiseOrValue<BigNumberish>,
      levels: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxLevels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pok(overrides?: CallOverrides): Promise<[string]>;

    pookyball(overrides?: CallOverrides): Promise<[string]>;
  };

  PXP_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  PXP_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  RATIO_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  RATIO_POK(overrides?: CallOverrides): Promise<BigNumber>;

  RATIO_PXP(overrides?: CallOverrides): Promise<BigNumber>;

  levelPOK(
    level: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  levelPOKCost(
    tokenId: PromiseOrValue<BigNumberish>,
    levels: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  levelPXP(
    level: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  levelUp(
    tokenId: PromiseOrValue<BigNumberish>,
    levels: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxLevels(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pok(overrides?: CallOverrides): Promise<string>;

  pookyball(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    PXP_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    PXP_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    RATIO_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    RATIO_POK(overrides?: CallOverrides): Promise<BigNumber>;

    RATIO_PXP(overrides?: CallOverrides): Promise<BigNumber>;

    levelPOK(
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    levelPOKCost(
      tokenId: PromiseOrValue<BigNumberish>,
      levels: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    levelPXP(
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    levelUp(
      tokenId: PromiseOrValue<BigNumberish>,
      levels: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxLevels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pok(overrides?: CallOverrides): Promise<string>;

    pookyball(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    PXP_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    PXP_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    RATIO_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    RATIO_POK(overrides?: CallOverrides): Promise<BigNumber>;

    RATIO_PXP(overrides?: CallOverrides): Promise<BigNumber>;

    levelPOK(
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    levelPOKCost(
      tokenId: PromiseOrValue<BigNumberish>,
      levels: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    levelPXP(
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    levelUp(
      tokenId: PromiseOrValue<BigNumberish>,
      levels: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxLevels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pok(overrides?: CallOverrides): Promise<BigNumber>;

    pookyball(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PXP_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PXP_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RATIO_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RATIO_POK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RATIO_PXP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    levelPOK(
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    levelPOKCost(
      tokenId: PromiseOrValue<BigNumberish>,
      levels: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    levelPXP(
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    levelUp(
      tokenId: PromiseOrValue<BigNumberish>,
      levels: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxLevels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pok(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pookyball(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
